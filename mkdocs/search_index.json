{
    "docs": [
        {
            "location": "/", 
            "text": "MkDocs Demo\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#mkdocs-demo", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "MkDocs Demo"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/user-guide/configuration/", 
            "text": "Configuration\n\n\nGuide to all available configuration settings.\n\n\n\n\nIntroduction\n\n\nProject settings are always configured by using a YAML configuration file in the project directory named \nmkdocs.yml\n.\n\n\nAs a minimum this configuration file must contain the \nsite_name\n setting.  All other settings are optional.\n\n\nProject information\n\n\nsite_name\n\n\nThis is a \nrequired setting\n, and should be a string that is used as the main title for the project documentation.  For example:\n\n\nsite_name: Marshmallow Generator\n\n\n\nWhen rendering the theme this setting will be passed as the \nsite_name\n context variable.\n\n\nsite_url\n\n\nSet the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nrepo_url\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\nrepo_url: https://github.com/example/repository/\n\n\n\ndefault\n: \nnull\n\n\nrepo_name\n\n\nWhen set, provides a link to your GitHub or Bitbucket repository on each page.\n\n\ndefault\n: \n'GitHub'\n or \n'Bitbucket'\n if the \nrepo_url\n matches those domains, otherwise \nnull\n\n\nsite_description\n\n\nSet the site description. This will add a meta tag to the generated HTML header.\n\ndefault\n: \nnull\n\n\nsite_author\n\n\nSet the name of the author. This will add a meta tag to the generated HTML header.\n\n\ndefault\n: \nnull\n\n\nsite_favicon\n\n\nSet the favicon to use. Putting a \nfavicon.ico\n into the \ndocs/\n directory, the config would look as follows:\n\n\nsite_favicon: favicon.ico\n\n\n\n\ndefault\n: \nnull\n\n\ncopyright\n\n\nSet the copyright information to be included in the documentation by the theme.\n\n\ndefault\n: \nnull\n\n\ngoogle_analytics\n\n\nSet the Google analytics tracking configuration.\n\n\ngoogle_analytics: ['UA-36723568-3', 'mkdocs.org']\n\n\n\n\ndefault\n: \nnull\n\n\nremote_branch\n\n\nSet the remote branch to commit to when using \ngh-deploy\n to deploy to Github Pages. This option can be overridden by a command line option in \ngh-deploy\n.\n\n\ndefault\n: \ngh-pages\n\n\nremote_name\n\n\nSet the remote name to push to when using \ngh-deploy\n to deploy to Github Pages. This option can be overridden by a command line option in \ngh-deploy\n.\n\n\ndefault\n: \ngh-pages\n\n\nDocumentation layout\n\n\npages\n\n\nThis setting is used to determine the set of pages that should be built for the documentation. For example, the following would create Introduction, User Guide and About pages, given the three source files \nindex.md\n, \nuser-guide.md\n and \nabout.md\n, respectively.\n\n\npages:\n- 'Introduction': 'index.md'\n- 'User Guide': 'user-guide.md'\n- 'About': 'about.md'\n\n\n\nSee the section on \nconfiguring pages and navigation\n for a more detailed breakdown, including how to create sub-sections.\n\n\nBuild directories\n\n\ntheme\n\n\nSets the theme of your documentation site, for a list of available themes visit\n\nstyling your docs\n.\n\n\ndefault\n: \n'mkdocs'\n\n\ntheme_dir\n\n\nLets you set a directory to a custom theme.  This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path.\n\n\nSee \nstyling your docs\n for an explanation of custom themes.\n\n\ndefault\n: \nnull\n\n\ndocs_dir\n\n\nLets you set the directory containing the documentation source markdown files.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.\n\n\ndefault\n: \n'docs'\n\n\nsite_dir\n\n\nLets you set the directory where the output HTML and other files are created.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.\n\n\ndefault\n: \n'site'\n\n\n!!! note \"Note:\"\n    If you are using source code control you will normally want to ensure\n    that your \nbuild output\n files are not committed into the repository, and only\n    keep the \nsource\n files under version control. For example, if using \ngit\n you\n    might add the following line to your \n.gitignore\n file:\n\n\n    site/\n\nIf you're using another source code control you'll want to check its\ndocumentation on how to ignore specific directories.\n\n\n\nextra_css\n\n\nSet a list of CSS files to be included by the theme. For example, the\nfollowing example will include the the extra.css file within the css\nsubdirectory in your \ndocs_dir\n.\n\n\nextra_css:\n- css/extra.css\n- css/second_extra.css\n\n\n\ndefault\n: By default \nextra_css\n will contain a list of all the CSS files found within the \ndocs_dir\n, if none are found it will be \n[]\n (an empty list).\n\n\nextra_javascript\n\n\nSet a list of JavaScript files to be included by the theme. See the example\nin \nextra_css\n for usage.\n\n\ndefault\n: By default \nextra_javascript\n will contain a list of all the JavaScript files found within the \ndocs_dir\n, if none are found it will be \n[]\n (an empty list).\n\n\nextra_templates\n\n\nSet a list of templates to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about \ncustom themes\n and specifically the section about the \nvariables that are available\n to templates. See the example in \nextra_css\n for usage.\n\n\ndefault\n: Unlike extra_css and extra_javascript, by default \nextra_templates\n will  be \n[]\n (an empty list).\n\n\nextra\n\n\nA set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes.\n\n\nFor example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this:\n\n\nextra:\n    version: 1.0\n\n\n\ndefault\n: By default \nextra\n will be an empty key value mapping.\n\n\nPreview controls\n\n\nuse_directory_urls\n\n\nThis setting controls the style used for linking to pages within the documentation.\n\n\nThe following table demonstrates how the URLs used on the site differ when setting \nuse_directory_urls\n to \ntrue\n or \nfalse\n.\n\n\n\n\n\n\n\n\nSource file\n\n\nGenerated HTML\n\n\nuse_directory_urls=true\n\n\nuse_directory_urls=false\n\n\n\n\n\n\n\n\n\n\nindex.md\n\n\nindex.html\n\n\n/\n\n\n/index.html\n\n\n\n\n\n\napi-guide.md\n\n\napi-guide/index.html\n\n\n/api-guide/\n\n\n/api-guide/index.html\n\n\n\n\n\n\nabout.md\n\n\nabout/index.html\n\n\n/about/\n\n\n/about/index.html\n\n\n\n\n\n\n\n\nThe default style of \nuse_directory_urls=true\n creates more user friendly URLs, and is usually what you'll want to use.\n\n\nThe alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it create links that point directly to the target \nfile\n rather than the target \ndirectory\n.\n\n\ndefault\n: \ntrue\n\n\nstrict\n\n\nDetermines if a broken link to a page within the documentation is considered a warning or an error (link to a page not listed in the pages setting).  Set to true to halt processing when a broken link is found, false prints a warning.\n\n\ndefault\n: \nfalse\n\n\ndev_addr\n\n\nDetermines the address used when running \nmkdocs serve\n.  Setting this allows you to use another port, or allows you to make the service accessible over your local network by using the \n0.0.0.0\n address.\n\n\nAs with all settings, you can set this from the command line, which can be useful, for example:\n\n\nmkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, accessible over the local network.\n\n\n\ndefault\n: \n'127.0.0.1:8000'\n\n\nFormatting options\n\n\nmarkdown_extensions\n\n\nMkDocs uses the \nPython Markdown\n library to translate Markdown files\ninto HTML. Python Markdown supports a variety of \nextensions\n\nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default (\nmeta\n, \ntoc\n, \ntables\n,\nand \nfenced_code\n).\n\n\nFor example, to enable the \nSmartyPants typography extension\n, use:\n\n\nmarkdown_extensions:\n    - smarty\n\n\n\nSome extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n(\noption_name: option value\n) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.\n\n\nFor example, to enable permalinks in the (included) \ntoc\n extension, use:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n\n\n\nNote that a colon (\n:\n) must follow the extension name (\ntoc\n) and then on a new line\nthe option name and value must be indented and seperated by a colon. If you would like\nto define multipe options for a single extension, each option must be defined on\na seperate line:\n\n\nmarkdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"\n\n\n\nAdd an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:\n\n\nmarkdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists\n\n\n\n!!! note \"See Also:\"\n    The Python-Markdown documentation provides a \nlist of extensions\n\n    which are available out-of-the-box. For a list of configuration options\n    available for a given extension, see the documentation for that extension.\n\n\nYou may also install and use various [third party extensions][3rd]. Consult the\ndocumentation provided by those extensions for installation instructions and\navailable configuration options.\n\n\n\ndefault\n: \n[]", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/configuration/#configuration", 
            "text": "Guide to all available configuration settings.", 
            "title": "Configuration"
        }, 
        {
            "location": "/user-guide/configuration/#introduction", 
            "text": "Project settings are always configured by using a YAML configuration file in the project directory named  mkdocs.yml .  As a minimum this configuration file must contain the  site_name  setting.  All other settings are optional.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/configuration/#project-information", 
            "text": "site_name  This is a  required setting , and should be a string that is used as the main title for the project documentation.  For example:  site_name: Marshmallow Generator  When rendering the theme this setting will be passed as the  site_name  context variable.  site_url  Set the canonical URL of the site. This will add a link tag with the canonical URL to the generated HTML header.  default :  null  repo_url  When set, provides a link to your GitHub or Bitbucket repository on each page.  repo_url: https://github.com/example/repository/  default :  null  repo_name  When set, provides a link to your GitHub or Bitbucket repository on each page.  default :  'GitHub'  or  'Bitbucket'  if the  repo_url  matches those domains, otherwise  null  site_description  Set the site description. This will add a meta tag to the generated HTML header. default :  null  site_author  Set the name of the author. This will add a meta tag to the generated HTML header.  default :  null  site_favicon  Set the favicon to use. Putting a  favicon.ico  into the  docs/  directory, the config would look as follows:  site_favicon: favicon.ico  default :  null  copyright  Set the copyright information to be included in the documentation by the theme.  default :  null  google_analytics  Set the Google analytics tracking configuration.  google_analytics: ['UA-36723568-3', 'mkdocs.org']  default :  null  remote_branch  Set the remote branch to commit to when using  gh-deploy  to deploy to Github Pages. This option can be overridden by a command line option in  gh-deploy .  default :  gh-pages  remote_name  Set the remote name to push to when using  gh-deploy  to deploy to Github Pages. This option can be overridden by a command line option in  gh-deploy .  default :  gh-pages", 
            "title": "Project information"
        }, 
        {
            "location": "/user-guide/configuration/#documentation-layout", 
            "text": "pages  This setting is used to determine the set of pages that should be built for the documentation. For example, the following would create Introduction, User Guide and About pages, given the three source files  index.md ,  user-guide.md  and  about.md , respectively.  pages:\n- 'Introduction': 'index.md'\n- 'User Guide': 'user-guide.md'\n- 'About': 'about.md'  See the section on  configuring pages and navigation  for a more detailed breakdown, including how to create sub-sections.", 
            "title": "Documentation layout"
        }, 
        {
            "location": "/user-guide/configuration/#build-directories", 
            "text": "theme  Sets the theme of your documentation site, for a list of available themes visit styling your docs .  default :  'mkdocs'  theme_dir  Lets you set a directory to a custom theme.  This can either be a relative directory, in which case it is resolved relative to the directory containing your configuration file, or it can be an absolute directory path.  See  styling your docs  for an explanation of custom themes.  default :  null  docs_dir  Lets you set the directory containing the documentation source markdown files.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.  default :  'docs'  site_dir  Lets you set the directory where the output HTML and other files are created.  This can either be a relative directory, in which case it is resolved relative to the directory containing you configuration file, or it can be an absolute directory path.  default :  'site'  !!! note \"Note:\"\n    If you are using source code control you will normally want to ensure\n    that your  build output  files are not committed into the repository, and only\n    keep the  source  files under version control. For example, if using  git  you\n    might add the following line to your  .gitignore  file:      site/\n\nIf you're using another source code control you'll want to check its\ndocumentation on how to ignore specific directories.  extra_css  Set a list of CSS files to be included by the theme. For example, the\nfollowing example will include the the extra.css file within the css\nsubdirectory in your  docs_dir .  extra_css:\n- css/extra.css\n- css/second_extra.css  default : By default  extra_css  will contain a list of all the CSS files found within the  docs_dir , if none are found it will be  []  (an empty list).  extra_javascript  Set a list of JavaScript files to be included by the theme. See the example\nin  extra_css  for usage.  default : By default  extra_javascript  will contain a list of all the JavaScript files found within the  docs_dir , if none are found it will be  []  (an empty list).  extra_templates  Set a list of templates to be built by MkDocs. To see more about writing templates for MkDocs read the documentation about  custom themes  and specifically the section about the  variables that are available  to templates. See the example in  extra_css  for usage.  default : Unlike extra_css and extra_javascript, by default  extra_templates  will  be  []  (an empty list).  extra  A set of key value pairs, where the values can be any valid YAML construct, that will be passed to the template. This allows for great flexibility when creating custom themes.  For example, if you are using a theme that supports displaying the project version, you can pass it to the theme like this:  extra:\n    version: 1.0  default : By default  extra  will be an empty key value mapping.", 
            "title": "Build directories"
        }, 
        {
            "location": "/user-guide/configuration/#preview-controls", 
            "text": "use_directory_urls  This setting controls the style used for linking to pages within the documentation.  The following table demonstrates how the URLs used on the site differ when setting  use_directory_urls  to  true  or  false .     Source file  Generated HTML  use_directory_urls=true  use_directory_urls=false      index.md  index.html  /  /index.html    api-guide.md  api-guide/index.html  /api-guide/  /api-guide/index.html    about.md  about/index.html  /about/  /about/index.html     The default style of  use_directory_urls=true  creates more user friendly URLs, and is usually what you'll want to use.  The alternate style can occasionally be useful if you want your documentation to remain properly linked when opening pages directly from the file system, because it create links that point directly to the target  file  rather than the target  directory .  default :  true  strict  Determines if a broken link to a page within the documentation is considered a warning or an error (link to a page not listed in the pages setting).  Set to true to halt processing when a broken link is found, false prints a warning.  default :  false  dev_addr  Determines the address used when running  mkdocs serve .  Setting this allows you to use another port, or allows you to make the service accessible over your local network by using the  0.0.0.0  address.  As with all settings, you can set this from the command line, which can be useful, for example:  mkdocs serve --dev-addr=0.0.0.0:80  # Run on port 80, accessible over the local network.  default :  '127.0.0.1:8000'", 
            "title": "Preview controls"
        }, 
        {
            "location": "/user-guide/configuration/#formatting-options", 
            "text": "markdown_extensions  MkDocs uses the  Python Markdown  library to translate Markdown files\ninto HTML. Python Markdown supports a variety of  extensions \nthat customize how pages are formatted. This setting lets you enable a list of\nextensions beyond the ones that MkDocs uses by default ( meta ,  toc ,  tables ,\nand  fenced_code ).  For example, to enable the  SmartyPants typography extension , use:  markdown_extensions:\n    - smarty  Some extensions provide configuration options of their own. If you would like to\nset any configuration options, then you can nest a key/value mapping\n( option_name: option value ) of any options that a given extension supports.\nSee the documentation for the extension you are using to determine what options\nthey support.  For example, to enable permalinks in the (included)  toc  extension, use:  markdown_extensions:\n    - toc:\n        permalink: True  Note that a colon ( : ) must follow the extension name ( toc ) and then on a new line\nthe option name and value must be indented and seperated by a colon. If you would like\nto define multipe options for a single extension, each option must be defined on\na seperate line:  markdown_extensions:\n    - toc:\n        permalink: True\n        separator: \"_\"  Add an additional item to the list for each extension. If you have no\nconfiguration options to set for a specific extension, then simply omit options\nfor that extension:  markdown_extensions:\n    - smarty\n    - toc:\n        permalink: True\n    - sane_lists  !!! note \"See Also:\"\n    The Python-Markdown documentation provides a  list of extensions \n    which are available out-of-the-box. For a list of configuration options\n    available for a given extension, see the documentation for that extension.  You may also install and use various [third party extensions][3rd]. Consult the\ndocumentation provided by those extensions for installation instructions and\navailable configuration options.  default :  []", 
            "title": "Formatting options"
        }, 
        {
            "location": "/user-guide/custom-themes/", 
            "text": "Custom themes\n\n\nA guide to creating and distributing custom themes.\n\n\n\n\nWhen creating a new theme, you can either follow the steps in this guide to\ncreate one from scratch or you can download the \nmkdocs-basic-theme\n as a\nbasic, yet complete, theme with all the boilerplate required. \nYou can find\nthis base theme on \nGitHub\n.\nIt contains detailed comments in the code to describe the different features\nand their usage.\n\n\nCreating a custom theme\n\n\nThe bare minimum required for a custom theme is a \nbase.html\n \nJinja2\ntemplate\n file. This should be placed in a directory which will be the\n\ntheme_dir\n and it should be created next to the \nmkdocs.yml\n configuration\nfile. Within \nmkdocs.yml\n, specify the \ntheme_dir\n option and set it to the\nname of the directory containing \nbase.html\n. For example, given this example\nproject layout:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...\n\n\n\nYou would include the following setting to use the custom theme directory:\n\n\ntheme_dir: 'custom_theme'\n\n\n\nIf used in combination with the \ntheme\n configuration value a custom theme can\nbe used to replace only specific parts of a built-in theme. For example, with\nthe above layout and if you set \ntheme: mkdocs\n then the \nbase.html\n file\nwould replace that in the theme but otherwise it would remain the same. This\nis useful if you want to make small adjustments to an existing theme.\n\n\nBasic theme\n\n\nThe simplest \nbase.html\n file is the following:\n\n\n!DOCTYPE html\n\n\nhtml\n\n  \nhead\n\n    \ntitle\n{% if page_title %}{{ page_title }} - {% endif %}{{ site_name }}\n/title\n\n  \n/head\n\n  \nbody\n\n    {{ content }}\n  \n/body\n\n\n/html\n\n\n\n\n\nArticle content from each page specified in \nmkdocs.yml\n is inserted using the\n\n{{ content }}\n tag. Stylesheets and scripts can be brought into this theme as\nwith a normal HTML file. Navbars and tables of contents can also be generated\nand included automatically, through the \nnav\n and \ntoc\n objects, respectively.\nIf you wish to write your own theme, it is recommended to start with one of\nthe \nbuilt-in themes\n and modify it accordingly.\n\n\nTemplate Variables\n\n\nEach template in a theme is built with a template context. These are the\nvariables that are available to themes. The context varies depending on the\ntemplate that is being built. At the moment templates are either built with\nthe global context or with a page specific context. The global context is used\nfor HTML pages that don't represent an individual Markdown document, for\nexample a 404.html page or search.html.\n\n\nGlobal Context\n\n\nThe following variables in the context map directly the \nconfiguration options\n\n.\n\n\n\n\n\n\n\n\nVariable Name\n\n\nConfiguration name\n\n\n\n\n\n\n\n\n\n\n\n\nsite_name\n\n\nsite_name\n\n\n\n\n\n\n\n\nsite_author\n\n\nsite_author\n\n\n\n\n\n\n\n\nfavicon\n\n\nsite_favicon\n\n\n\n\n\n\n\n\npage_description\n\n\nsite_description\n\n\n\n\n\n\n\n\nrepo_url\n\n\nrepo_url\n\n\n\n\n\n\n\n\nrepo_name\n\n\nrepo_name\n\n\n\n\n\n\n\n\nsite_url\n\n\nsite_url\n\n\n\n\n\n\n\n\nextra_css\n\n\nextra_css\n\n\n\n\n\n\n\n\nextra_javascript\n\n\nextra_javascript\n\n\n\n\n\n\n\n\nextra\n\n\nextra\n\n\n\n\n\n\n\n\ninclude_nav\n\n\ninclude_nav\n\n\n\n\n\n\n\n\ninclude_next_prev\n\n\ninclude_next_prev\n\n\n\n\n\n\n\n\ncopyright\n\n\ncopyright\n\n\n\n\n\n\n\n\ngoogle_analytics\n\n\ngoogle_analytics\n\n\n\n\n\n\n\n\n\n\nThe following variables provide information about the navigation and location.\n\n\nnav\n\n\nThe \nnav\n variable is used to create the navigation for the documentation.\nFollowing is a basic usage example which outputs the first and second level\nnavigation as a nested list.\n\n\nul\n\n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n          \nli\n{{ nav_item.title }}\n              \nul\n\n              {% for nav_item in nav_item.children %}\n                  \nli class=\n{% if nav_item.active%}current{%endif%}\n\n                      \na href=\n{{ nav_item.url }}\n{{ nav_item.title }}\n/a\n\n                  \n/li\n\n              {% endfor %}\n              \n/ul\n\n          \n/li\n\n      {% else %}\n          \nli class=\n{% if nav_item.active%}current{%endif%}\n\n              \na href=\n{{ nav_item.url }}\n{{ nav_item.title }}\n/a\n\n          \n/li\n\n      {% endif %}\n\n  {% endfor %}\n\n/ul\n\n\n\n\n\nbase_url\n\n\nThe \nbase_url\n provides a relative path to the root of the MkDocs project.\nThis makes it easy to include links to static assets in your theme. For\nexample, if your theme includes a \njs\n folder, to include \ntheme.js\n from that\nfolder on all pages you would do this:\n\n\nscript src=\n{{ base_url }}/js/theme.js\n/script\n\n\n\n\n\nhomepage_url\n\n\nProvides a relative path to the documentation homepage.\n\n\nmkdocs_version\n\n\nContains the current MkDocs version.\n\n\nbuild_date_utc\n\n\nA Python datetime object that represents the date and time the documentation\nwas built in UTC. This is useful for showing how recently the documentation\nwas updated.\n\n\nPage Context\n\n\nThe page context includes all of the above Global context and the following\nadditional variables.\n\n\npage_title\n\n\nContains the Title for the current page.\n\n\npage_description\n\n\nContains the description for the current page on the homepage, it is blank on\nother pages.\n\n\ncontent\n\n\nThe rendered Markdown as HTML, this is the contents of the documentation.\n\n\ntoc\n\n\nAn object representing the Table of contents for a page. Displaying the table\nof contents as a simple list can be achieved like this.\n\n\nul\n\n{% for toc_item in toc %}\n    \nli\na href=\n{{ toc_item.url }}\n{{ toc_item.title }}\n/a\n/li\n\n    {% for toc_item in toc_item.children %}\n        \nli\na href=\n{{ toc_item.url }}\n{{ toc_item.title }}\n/a\n/li\n\n    {% endfor %}\n{% endfor %}\n\n/ul\n\n\n\n\n\nmeta\n\n\nA mapping of the metadata included at the top of the markdown page. In this\nexample we define a \nsource\n property above the page title.\n\n\nsource: generics.py\n        mixins.py\n\n# Page title\n\nContent...\n\n\n\n\nA template can access this metadata for the page with the \nmeta.source\n\nvariable. This could then be used to link to source files related to the\ndocumentation page.\n\n\n{% for filename in meta.source %}\n  \na class=\ngithub\n href=\nhttps://github.com/.../{{ filename }}\n\n    \nspan class=\nlabel label-info\n{{ filename }}\n/span\n\n  \n/a\n\n{% endfor %}\n\n\n\n\ncanonical_url\n\n\nThe full, canonical URL to the current page. This includes the site_url from\nthe configuration.\n\n\ncurrent_page\n\n\nThe page object for the current page. The page path and url properties can be\ndisplayed like this.\n\n\nh1\n{{ current_page.title }}\n/h1\n\n\np\n This page is at {{ current_page.url }}\n/p\n\n\n\n\n\nprevious_page\n\n\nThe page object for the previous  page. The usage is the same as for\n\ncurrent_page\n.\n\n\nnext_page\n\n\nThe page object for the next page.The usage is the same as for \ncurrent_page\n.\n\n\nExtra Context\n\n\nAdditional variables can be passed to the template with the\n\nextra\n configuration option. This is a set of key value\npairs that can make custom templates far more flexible.\n\n\nFor example, this could be used to include the project version of all pages\nand a list of links related to the project. This can be achieved with the\nfollowing \nextra\n configuration:\n\n\nextra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/\n\n\n\n\nAnd then displayed with this HTML in the custom theme.\n\n\n{{ config.extra.version }}\n\n{% if config.extra.links %}\n  \nul\n\n  {% for link in config.extra.links %}\n      \nli\n{{ link }}\n/li\n\n  {% endfor %}\n  \n/ul\n\n{% endif %}\n\n\n\n\nSearch and themes\n\n\nAs of MkDocs \n0.13\n client side search support has been added to MkDocs with\n\nLunr.js\n.\n\n\nSearch can either be added to every page in the theme or to a dedicated\ntemplate which must be named \nsearch.html\n. The search template will be build\nwith the same name and can be viewable with \nmkdocs serve\n at\n\nhttp://localhost:8000/search.html\n. An example of the two different\napproaches can be seen by comparing the \nmkdocs\n and \nreadthedocs\n themes.\n\n\nThe following HTML needs to be added to the theme so the JavaScript is loaded\nfor Lunr.js.\n\n\nscript\nvar base_url = '{{ base_url }}';\n/script\n\n\nscript data-main=\n{{ base_url }}/mkdocs/js/search.js\n src=\n{{ base_url }}/mkdocs/js/require.js\n/script\n\n\n\n\n\n!!! note\n\n\nThe above JavaScript will download the search index, for larger\ndocumentation projects this can be a heavy operation. In those cases, it\nis suggested that you either use the `search.html` approach to only\ninclude search on one page or load the JavaScript on an event like a form\nsubmit.\n\n\n\nThis loads the JavaScript and sets a global variable \nbase_url\n which allows\nthe JavaScript to make the links relative to the current page. The above\nJavaScript, with the following HTML in a \nsearch.html\n template will add a\nfull search implementation to your theme.\n\n\nh1 id=\nsearch\nSearch Results\n/h1\n\n\n\nform action=\nsearch.html\n\n  \ninput name=\nq\n id=\nmkdocs-search-query\n type=\ntext\n class=\nsearch_input search-query ui-autocomplete-input\n placeholder=\nSearch the Docs\n autocomplete=\noff\n\n\n/form\n\n\n\ndiv id=\nmkdocs-search-results\n\n  Sorry, page not found.\n\n/div\n\n\n\n\n\nThis works by looking for the specific ID's used in the above HTML. The input\nfor the user to type the search query must have the ID \nmkdocs-search-query\n\nand \nmkdocs-search-results\n is the directory where the results will be placed.\n\n\nPackaging Themes\n\n\nMkDocs makes use of \nPython packaging\n to distribute themes. This comes with a\nfew requirements.\n\n\nTo see an example of a package containing one theme, see the \nMkDocs Bootstrap\ntheme\n and to see a package that contains many themes, see the \nMkDocs\nBootswatch theme\n.\n\n\nPackage Layout\n\n\nThe following layout is recommended for themes. Two files at the top level\ndirectory called \nMANIFEST.in\n amd \nsetup.py\n. Then a directory with the name\nof your theme and containing a \nbase.html\n file and a \n__init__.py\n.\n\n\n.\n|-- MANIFEST.in\n|-- theme_name\n|   |-- base.html\n|   |-- __init__.py\n`-- setup.py\n\n\n\n\nThe \nMANIFEST.in\n file should contain the following contents but with\ntheme_name updated and any extra file extensions added to the include.\n\n\nrecursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n\n\n\n\nThe \nsetup.py\n should include the following text with the modifications\ndescribed below.\n\n\nfrom setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\n\nsetup(\n    name=\nmkdocs-themename\n,\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)\n\n\n\n\nFill in the URL, license, description, author and author email address.\n\n\nThe name should follow the convention \nmkdocs-themename\n (like \nmkdocs-\nbootstrap\n and \nmkdocs-bootswatch\n), starting with MkDocs, using hyphens to\nseparate words and including the name of your theme.\n\n\nMost of the rest of the file can be left unedited. The last section we need to\nchange is the entry_points. This is how MkDocs finds the theme(s) you are\nincluding in the package. The name on the left is the one that users will use\nin their mkdocs.yml and the one on the right is the directory containing your\ntheme files.\n\n\nThe directory you created at the start of this section with the base.html file\nshould contain all of the other theme files. The minimum requirement is that\nit includes a \nbase.html\n for the theme. It \nmust\n also include a\n\n__init__.py\n file which should be empty, this file tells Python that the\ndirectory is a package.\n\n\nDistributing Themes\n\n\nWith the above changes, your theme should now be ready to install. This can be\ndone with pip, using \npip install .\n if you are still in the same directory as\nthe setup.py.\n\n\nMost Python packages, including MkDocs, are distributed on PyPI. To do this,\nyou should run the following command.\n\n\npython setup.py register\n\n\n\n\nIf you don't have an account setup, you should be prompted to create one.\n\n\nFor a much more detailed guide, see the official Python packaging\ndocumentation for \nPackaging and Distributing Projects\n.\n\n\nhttps://packaging.python.org/en/latest/distributing.html", 
            "title": "Custom themes"
        }, 
        {
            "location": "/user-guide/custom-themes/#custom-themes", 
            "text": "A guide to creating and distributing custom themes.   When creating a new theme, you can either follow the steps in this guide to\ncreate one from scratch or you can download the  mkdocs-basic-theme  as a\nbasic, yet complete, theme with all the boilerplate required.  You can find\nthis base theme on  GitHub .\nIt contains detailed comments in the code to describe the different features\nand their usage.", 
            "title": "Custom themes"
        }, 
        {
            "location": "/user-guide/custom-themes/#creating-a-custom-theme", 
            "text": "The bare minimum required for a custom theme is a  base.html   Jinja2\ntemplate  file. This should be placed in a directory which will be the theme_dir  and it should be created next to the  mkdocs.yml  configuration\nfile. Within  mkdocs.yml , specify the  theme_dir  option and set it to the\nname of the directory containing  base.html . For example, given this example\nproject layout:  mkdocs.yml\ndocs/\n    index.md\n    about.md\ncustom_theme/\n    base.html\n    ...  You would include the following setting to use the custom theme directory:  theme_dir: 'custom_theme'  If used in combination with the  theme  configuration value a custom theme can\nbe used to replace only specific parts of a built-in theme. For example, with\nthe above layout and if you set  theme: mkdocs  then the  base.html  file\nwould replace that in the theme but otherwise it would remain the same. This\nis useful if you want to make small adjustments to an existing theme.", 
            "title": "Creating a custom theme"
        }, 
        {
            "location": "/user-guide/custom-themes/#basic-theme", 
            "text": "The simplest  base.html  file is the following:  !DOCTYPE html  html \n   head \n     title {% if page_title %}{{ page_title }} - {% endif %}{{ site_name }} /title \n   /head \n   body \n    {{ content }}\n   /body  /html   Article content from each page specified in  mkdocs.yml  is inserted using the {{ content }}  tag. Stylesheets and scripts can be brought into this theme as\nwith a normal HTML file. Navbars and tables of contents can also be generated\nand included automatically, through the  nav  and  toc  objects, respectively.\nIf you wish to write your own theme, it is recommended to start with one of\nthe  built-in themes  and modify it accordingly.", 
            "title": "Basic theme"
        }, 
        {
            "location": "/user-guide/custom-themes/#template-variables", 
            "text": "Each template in a theme is built with a template context. These are the\nvariables that are available to themes. The context varies depending on the\ntemplate that is being built. At the moment templates are either built with\nthe global context or with a page specific context. The global context is used\nfor HTML pages that don't represent an individual Markdown document, for\nexample a 404.html page or search.html.  Global Context  The following variables in the context map directly the  configuration options .     Variable Name  Configuration name       site_name  site_name     site_author  site_author     favicon  site_favicon     page_description  site_description     repo_url  repo_url     repo_name  repo_name     site_url  site_url     extra_css  extra_css     extra_javascript  extra_javascript     extra  extra     include_nav  include_nav     include_next_prev  include_next_prev     copyright  copyright     google_analytics  google_analytics      The following variables provide information about the navigation and location.  nav  The  nav  variable is used to create the navigation for the documentation.\nFollowing is a basic usage example which outputs the first and second level\nnavigation as a nested list.  ul \n  {% for nav_item in nav %}\n      {% if nav_item.children %}\n           li {{ nav_item.title }}\n               ul \n              {% for nav_item in nav_item.children %}\n                   li class= {% if nav_item.active%}current{%endif%} \n                       a href= {{ nav_item.url }} {{ nav_item.title }} /a \n                   /li \n              {% endfor %}\n               /ul \n           /li \n      {% else %}\n           li class= {% if nav_item.active%}current{%endif%} \n               a href= {{ nav_item.url }} {{ nav_item.title }} /a \n           /li \n      {% endif %}\n\n  {% endfor %} /ul   base_url  The  base_url  provides a relative path to the root of the MkDocs project.\nThis makes it easy to include links to static assets in your theme. For\nexample, if your theme includes a  js  folder, to include  theme.js  from that\nfolder on all pages you would do this:  script src= {{ base_url }}/js/theme.js /script   homepage_url  Provides a relative path to the documentation homepage.  mkdocs_version  Contains the current MkDocs version.  build_date_utc  A Python datetime object that represents the date and time the documentation\nwas built in UTC. This is useful for showing how recently the documentation\nwas updated.  Page Context  The page context includes all of the above Global context and the following\nadditional variables.  page_title  Contains the Title for the current page.  page_description  Contains the description for the current page on the homepage, it is blank on\nother pages.  content  The rendered Markdown as HTML, this is the contents of the documentation.  toc  An object representing the Table of contents for a page. Displaying the table\nof contents as a simple list can be achieved like this.  ul \n{% for toc_item in toc %}\n     li a href= {{ toc_item.url }} {{ toc_item.title }} /a /li \n    {% for toc_item in toc_item.children %}\n         li a href= {{ toc_item.url }} {{ toc_item.title }} /a /li \n    {% endfor %}\n{% endfor %} /ul   meta  A mapping of the metadata included at the top of the markdown page. In this\nexample we define a  source  property above the page title.  source: generics.py\n        mixins.py\n\n# Page title\n\nContent...  A template can access this metadata for the page with the  meta.source \nvariable. This could then be used to link to source files related to the\ndocumentation page.  {% for filename in meta.source %}\n   a class= github  href= https://github.com/.../{{ filename }} \n     span class= label label-info {{ filename }} /span \n   /a \n{% endfor %}  canonical_url  The full, canonical URL to the current page. This includes the site_url from\nthe configuration.  current_page  The page object for the current page. The page path and url properties can be\ndisplayed like this.  h1 {{ current_page.title }} /h1  p  This page is at {{ current_page.url }} /p   previous_page  The page object for the previous  page. The usage is the same as for current_page .  next_page  The page object for the next page.The usage is the same as for  current_page .  Extra Context  Additional variables can be passed to the template with the extra  configuration option. This is a set of key value\npairs that can make custom templates far more flexible.  For example, this could be used to include the project version of all pages\nand a list of links related to the project. This can be achieved with the\nfollowing  extra  configuration:  extra:\n    version: 0.13.0\n    links:\n        - https://github.com/mkdocs\n        - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n        - http://www.mkdocs.org/  And then displayed with this HTML in the custom theme.  {{ config.extra.version }}\n\n{% if config.extra.links %}\n   ul \n  {% for link in config.extra.links %}\n       li {{ link }} /li \n  {% endfor %}\n   /ul \n{% endif %}", 
            "title": "Template Variables"
        }, 
        {
            "location": "/user-guide/custom-themes/#search-and-themes", 
            "text": "As of MkDocs  0.13  client side search support has been added to MkDocs with Lunr.js .  Search can either be added to every page in the theme or to a dedicated\ntemplate which must be named  search.html . The search template will be build\nwith the same name and can be viewable with  mkdocs serve  at http://localhost:8000/search.html . An example of the two different\napproaches can be seen by comparing the  mkdocs  and  readthedocs  themes.  The following HTML needs to be added to the theme so the JavaScript is loaded\nfor Lunr.js.  script var base_url = '{{ base_url }}'; /script  script data-main= {{ base_url }}/mkdocs/js/search.js  src= {{ base_url }}/mkdocs/js/require.js /script   !!! note  The above JavaScript will download the search index, for larger\ndocumentation projects this can be a heavy operation. In those cases, it\nis suggested that you either use the `search.html` approach to only\ninclude search on one page or load the JavaScript on an event like a form\nsubmit.  This loads the JavaScript and sets a global variable  base_url  which allows\nthe JavaScript to make the links relative to the current page. The above\nJavaScript, with the following HTML in a  search.html  template will add a\nfull search implementation to your theme.  h1 id= search Search Results /h1  form action= search.html \n   input name= q  id= mkdocs-search-query  type= text  class= search_input search-query ui-autocomplete-input  placeholder= Search the Docs  autocomplete= off  /form  div id= mkdocs-search-results \n  Sorry, page not found. /div   This works by looking for the specific ID's used in the above HTML. The input\nfor the user to type the search query must have the ID  mkdocs-search-query \nand  mkdocs-search-results  is the directory where the results will be placed.", 
            "title": "Search and themes"
        }, 
        {
            "location": "/user-guide/custom-themes/#packaging-themes", 
            "text": "MkDocs makes use of  Python packaging  to distribute themes. This comes with a\nfew requirements.  To see an example of a package containing one theme, see the  MkDocs Bootstrap\ntheme  and to see a package that contains many themes, see the  MkDocs\nBootswatch theme .  Package Layout  The following layout is recommended for themes. Two files at the top level\ndirectory called  MANIFEST.in  amd  setup.py . Then a directory with the name\nof your theme and containing a  base.html  file and a  __init__.py .  .\n|-- MANIFEST.in\n|-- theme_name\n|   |-- base.html\n|   |-- __init__.py\n`-- setup.py  The  MANIFEST.in  file should contain the following contents but with\ntheme_name updated and any extra file extensions added to the include.  recursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]  The  setup.py  should include the following text with the modifications\ndescribed below.  from setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\n\nsetup(\n    name= mkdocs-themename ,\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)  Fill in the URL, license, description, author and author email address.  The name should follow the convention  mkdocs-themename  (like  mkdocs-\nbootstrap  and  mkdocs-bootswatch ), starting with MkDocs, using hyphens to\nseparate words and including the name of your theme.  Most of the rest of the file can be left unedited. The last section we need to\nchange is the entry_points. This is how MkDocs finds the theme(s) you are\nincluding in the package. The name on the left is the one that users will use\nin their mkdocs.yml and the one on the right is the directory containing your\ntheme files.  The directory you created at the start of this section with the base.html file\nshould contain all of the other theme files. The minimum requirement is that\nit includes a  base.html  for the theme. It  must  also include a __init__.py  file which should be empty, this file tells Python that the\ndirectory is a package.  Distributing Themes  With the above changes, your theme should now be ready to install. This can be\ndone with pip, using  pip install .  if you are still in the same directory as\nthe setup.py.  Most Python packages, including MkDocs, are distributed on PyPI. To do this,\nyou should run the following command.  python setup.py register  If you don't have an account setup, you should be prompted to create one.  For a much more detailed guide, see the official Python packaging\ndocumentation for  Packaging and Distributing Projects .  https://packaging.python.org/en/latest/distributing.html", 
            "title": "Packaging Themes"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/", 
            "text": "Deploying your docs\n\n\nA basic guide to deploying your docs to various hosting providers\n\n\n\n\nGitHub Pages\n\n\nIf you host the source code for a project on \nGitHub\n, you can easily use\n\nGitHub Pages\n to host the documentation for your project. After you \ncheckout\n\nthe primary working branch (usually \nmaster\n) of the git repository where you\nmaintain the source documentation for your project, run the following command:\n\n\nmkdocs gh-deploy --clean\n\n\n\n\nThat's it! Behind the scenes, MkDocs will build your docs and use the \nghp-import\n\ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.\n\n\nUse \nmkdocs gh-deploy --help\n to get a full list of options available for the\n\ngh-deploy\n command.\n\n\nBe aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the \nbuild\n or \nserve\n commands and reviewing the built\nfiles locally.\n\n\n!!! warning\n\n\nYou should never edit files in your gh-pages branch by hand if you're using\nthe `gh-deploy` command because you will lose your work.\n\n\n\nRead the Docs\n\n\nRead the Docs\n offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the\n\ninstructions\n on their site to arrange the filies in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.\n\n\n!!! note\n\n\nTo benefit from all of the [features] offered by Read the Docs, you will need\nto use the [Read the Docs theme][theme] which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.\n\n\n\nPyPI\n\n\nIf you maintain a \nPython\n project which is hosted on the \nPython Package\nIndex\n (PyPI), you can use the hosting provided at \npythonhosted.org\n to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:\n\n\nmkdocs build --clean\npython setup.py upload_docs --upload-dir=site\n\n\n\n\nYou documentation will be hosted at \nhttp://pythonhosted.org/\nprojectname\n/\n\nwhere \nprojectname\n is the name you used to register your project with PyPI.\n\n\nThere are a few prerequisites for the above to work:\n\n\n\n\nYou must be using \nSetuptools\n in your \nsetup.py\n script (\nDistutils\n does not\noffer an \nupload_docs\n command).\n\n\nYour project must already be registered with PyPI (use \npython setup.py register\n).\n\n\nYour \nmkdocs.yml\n config file and your \"docs\" directory (value assigned to\nthe \ndocs_dir\n configuration option) are presumed to be in the root directory of\nyour project alongside your \nsetup.py\n script.\n\n\nIt is assumed that the default value (\n\"site\"\n) is assigned to the \nsite_dir\n\nconfiguration option in your \nmkdocs.yaml\n config file. If you have set a\ndifferent value, assign that value to the \n--upload-dir\n option.\n\n\n\n\nOther Providers\n\n\nAny hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While it would be impossible to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.\n\n\nWhen you build your site (using the \nmkdocs build\n command), all of the files\nare written to the directory assigned to the \nsite_dir\n configuration option\n(defaults to \n\"site\"\n) in your \nmkdocs.yaml\n config file. Generally, you will\nsimply need to copy the contents of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line \nftp\n, \nssh\n or \nscp\n client to transfer\nthe files.\n\n\nFor example, a typical set of commands from the command line might look\nsomething like this:\n\n\nmkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root\n\n\n\n\nOf course, you will need to replace \nuser\n with the username you have with your\nhosting provider and \nhost\n with the appropriate domain name. Additionally, you\nwill need to adjust the \n/path/to/server/root\n to match the configuration of\nyour hosts' file system.\n\n\nSee your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".", 
            "title": "Deploying your docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#deploying-your-docs", 
            "text": "A basic guide to deploying your docs to various hosting providers", 
            "title": "Deploying your docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#github-pages", 
            "text": "If you host the source code for a project on  GitHub , you can easily use GitHub Pages  to host the documentation for your project. After you  checkout \nthe primary working branch (usually  master ) of the git repository where you\nmaintain the source documentation for your project, run the following command:  mkdocs gh-deploy --clean  That's it! Behind the scenes, MkDocs will build your docs and use the  ghp-import \ntool to commit them to the gh-pages branch and push the gh-pages branch to\nGitHub.  Use  mkdocs gh-deploy --help  to get a full list of options available for the gh-deploy  command.  Be aware that you will not be able to review the built site before it is pushed\nto GitHub. Therefore, you may want to verify any changes you make to the docs\nbeforehand by using the  build  or  serve  commands and reviewing the built\nfiles locally.  !!! warning  You should never edit files in your gh-pages branch by hand if you're using\nthe `gh-deploy` command because you will lose your work.", 
            "title": "GitHub Pages"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#read-the-docs", 
            "text": "Read the Docs  offers free documentation hosting. You can import your docs\nusing any major version control system, including Mercurial, Git, Subversion,\nand Bazaar. Read the Docs supports MkDocs out-of-the-box. Follow the instructions  on their site to arrange the filies in your repository properly,\ncreate an account and point it at your publicly hosted repository. If properly\nconfigured, your documentation will update each time you push commits to your\npublic repository.  !!! note  To benefit from all of the [features] offered by Read the Docs, you will need\nto use the [Read the Docs theme][theme] which ships with MkDocs. The various\nthemes which may be referenced in Read the Docs' documentation are Sphinx\nspecific themes and will not work with MkDocs.", 
            "title": "Read the Docs"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#pypi", 
            "text": "If you maintain a  Python  project which is hosted on the  Python Package\nIndex  (PyPI), you can use the hosting provided at  pythonhosted.org  to\nhost documentation for your project. Run the following commands from your\nproject's root directory to upload your documentation:  mkdocs build --clean\npython setup.py upload_docs --upload-dir=site  You documentation will be hosted at  http://pythonhosted.org/ projectname / \nwhere  projectname  is the name you used to register your project with PyPI.  There are a few prerequisites for the above to work:   You must be using  Setuptools  in your  setup.py  script ( Distutils  does not\noffer an  upload_docs  command).  Your project must already be registered with PyPI (use  python setup.py register ).  Your  mkdocs.yml  config file and your \"docs\" directory (value assigned to\nthe  docs_dir  configuration option) are presumed to be in the root directory of\nyour project alongside your  setup.py  script.  It is assumed that the default value ( \"site\" ) is assigned to the  site_dir \nconfiguration option in your  mkdocs.yaml  config file. If you have set a\ndifferent value, assign that value to the  --upload-dir  option.", 
            "title": "PyPI"
        }, 
        {
            "location": "/user-guide/deploying-your-docs/#other-providers", 
            "text": "Any hosting provider which can serve static files can be used to serve\ndocumentation generated by MkDocs. While it would be impossible to document how\nto upload the docs to every hosting provider out there, the following guidelines\nshould provide some general assistance.  When you build your site (using the  mkdocs build  command), all of the files\nare written to the directory assigned to the  site_dir  configuration option\n(defaults to  \"site\" ) in your  mkdocs.yaml  config file. Generally, you will\nsimply need to copy the contents of that directory to the root directory of your\nhosting provider's server. Depending on your hosting provider's setup, you may\nneed to use a graphical or command line  ftp ,  ssh  or  scp  client to transfer\nthe files.  For example, a typical set of commands from the command line might look\nsomething like this:  mkdocs build --clean\nscp -r ./site usr@host:/path/to/server/root  Of course, you will need to replace  user  with the username you have with your\nhosting provider and  host  with the appropriate domain name. Additionally, you\nwill need to adjust the  /path/to/server/root  to match the configuration of\nyour hosts' file system.  See your host's documentation for specifics. You will likely want to search\ntheir documentation for \"ftp\" or \"uploading site\".", 
            "title": "Other Providers"
        }, 
        {
            "location": "/user-guide/styling-your-docs/", 
            "text": "Styling your docs\n\n\nHow to style and theme your documentation.\n\n\n\n\nMkDocs includes a number of different \nbuiltin themes\n and\n\nexternal themes\n which can easily be\n\ncustomised with extra CSS or JavaScript\n or you can\ncreate a \ncustom theme\n for your documentation.\n\n\nTo use a theme that is included in MkDocs, simply add this to your\n\nmkdocs.yml\n config file.\n\n\ntheme: readthedocs\n\n\n\nReplace \nreadthedocs\n with any of the \nbuiltin themes\n listed below.\n\n\nTo create a new custom theme or more heavily customise an existing theme, see\nthe \ncustom themes\n section below.\n\n\nBuilt-in themes\n\n\nmkdocs\n\n\n\n\nreadthedocs\n\n\n\n\nBootstrap and Bootswatch Themes\n\n\nMkDocs also includes themes provided by two packages. \nMkDocs Bootstrap\n and\n\nMkDocs Bootswatch\n. The Bootstrap theme provides a theme based on \nBootstrap\n\nand the Bootstrap theme provides 12 different themed Bootstrap themes based on\nthe \nBootswatch\n project.\n\n\n!!! note\n\n\nThe Bootstrap and Bootswatch themes will not be included by default from\nMkDocs version 1.0. They will need to be installed manually with `pip\ninstall mkdocs-bootstrap` or `pip install mkdocs-bootswatch`.\n\n\n\nBootstrap\n\n\n\n\nAmelia\n\n\n\n\nCerulean\n\n\n\n\nCosmo\n\n\n\n\nCyborg\n\n\n\n\nFlatly\n\n\n\n\nJournal\n\n\n\n\nReadable\n\n\n\n\nSimplex\n\n\n\n\nSlate\n\n\n\n\nSpacelab\n\n\n\n\nUnited\n\n\n\n\nYeti\n\n\n\n\nCustomising a Theme\n\n\nThe \nextra_css\n and \nextra_javascript\n configuration options can be used to\nmake tweaks and customisations to existing themes. To use these, you simply\nneed to include either CSS or JavaScript files within your \ndocumentation\ndirectory\n.\n\n\nFor example, to change the colour of the headers in your documentation, create\na file called \nextra.css\n and place it next to the documentation Markdown. In\nthat file add the following CSS.\n\n\nh1 {\n  color: red;\n}\n\n\n\n\n!!! Warning\n\n\nIf you are deploying your documentation with [ReadTheDocs]. You will need\nto explicitly list the CSS and JavaScript files you want to include inf\nyour config. To do this, add the following to your mkdocs.yml.\n\n    extra_css: [extra.css]\n\n\n\nAfter making these changes, they should be visible when you run \nmkdocs serve\n\n- if you already had this running, you should see that the CSS changes were\nautomatically picked up and the documentation will be updated.", 
            "title": "Styling your docs"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#styling-your-docs", 
            "text": "How to style and theme your documentation.   MkDocs includes a number of different  builtin themes  and external themes  which can easily be customised with extra CSS or JavaScript  or you can\ncreate a  custom theme  for your documentation.  To use a theme that is included in MkDocs, simply add this to your mkdocs.yml  config file.  theme: readthedocs  Replace  readthedocs  with any of the  builtin themes  listed below.  To create a new custom theme or more heavily customise an existing theme, see\nthe  custom themes  section below.", 
            "title": "Styling your docs"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#built-in-themes", 
            "text": "mkdocs   readthedocs", 
            "title": "Built-in themes"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#bootstrap-and-bootswatch-themes", 
            "text": "MkDocs also includes themes provided by two packages.  MkDocs Bootstrap  and MkDocs Bootswatch . The Bootstrap theme provides a theme based on  Bootstrap \nand the Bootstrap theme provides 12 different themed Bootstrap themes based on\nthe  Bootswatch  project.  !!! note  The Bootstrap and Bootswatch themes will not be included by default from\nMkDocs version 1.0. They will need to be installed manually with `pip\ninstall mkdocs-bootstrap` or `pip install mkdocs-bootswatch`.  Bootstrap   Amelia   Cerulean   Cosmo   Cyborg   Flatly   Journal   Readable   Simplex   Slate   Spacelab   United   Yeti", 
            "title": "Bootstrap and Bootswatch Themes"
        }, 
        {
            "location": "/user-guide/styling-your-docs/#customising-a-theme", 
            "text": "The  extra_css  and  extra_javascript  configuration options can be used to\nmake tweaks and customisations to existing themes. To use these, you simply\nneed to include either CSS or JavaScript files within your  documentation\ndirectory .  For example, to change the colour of the headers in your documentation, create\na file called  extra.css  and place it next to the documentation Markdown. In\nthat file add the following CSS.  h1 {\n  color: red;\n}  !!! Warning  If you are deploying your documentation with [ReadTheDocs]. You will need\nto explicitly list the CSS and JavaScript files you want to include inf\nyour config. To do this, add the following to your mkdocs.yml.\n\n    extra_css: [extra.css]  After making these changes, they should be visible when you run  mkdocs serve \n- if you already had this running, you should see that the CSS changes were\nautomatically picked up and the documentation will be updated.", 
            "title": "Customising a Theme"
        }, 
        {
            "location": "/user-guide/writing-your-docs/", 
            "text": "Writing your docs\n\n\nHow to write and layout your markdown source files.\n\n\n\n\nConfigure Pages and Navigation\n\n\nThe \npages configuration\n in your \nmkdocs.yml\n defines which pages are built by MkDocs and how they appear in the documentation navigation. If not provided, the pages configuration will be automatically created by discovering all the Markdown files in the \ndocumentation directory\n.\n\n\nA simple pages configuration looks like this:\n\n\npages:\n- 'index.md'\n- 'about.md'\n\n\n\n\nWith this example we will build two pages at the top level and they will automatically have their titles inferred from the filename. Assuming \ndocs_dir\n has the default value, \ndocs\n, the source files for this documentation would be \ndocs/index.md\n and \ndocs/about.md\n. To provide a custom name for these pages, they can be added before the filename.\n\n\npages:\n- Home: 'index.md'\n- About: 'about.md'\n\n\n\n\nMultilevel documentation\n\n\nSubsections can be created by listing related pages together under a section title. For example:\n\n\npages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'\n\n\n\n\nWith the above configuration we have three top level sections: Home, User Guide and About. Then under User Guide we have two pages, Writing your docs and Styling your docs. Under the About section we also have two pages, License and Release Notes.\n\n\nFile layout\n\n\nYour documentation source should be written as regular Markdown files, and placed in a directory somewhere in your project.  Normally this directory will be named \ndocs\n and will exist at the top level of your project, alongside the \nmkdocs.yml\n configuration file.\n\n\nThe simplest project you can create will look something like this:\n\n\nmkdocs.yml\ndocs/\n    index.md\n\n\n\n\nBy convention your project homepage should always be named \nindex\n.  Any of the following extensions may be used for your Markdown source files: \nmarkdown\n, \nmdown\n, \nmkdn\n, \nmkd\n, \nmd\n.\n\n\nYou can also create multi-page documentation, by creating several markdown files:\n\n\nmkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md\n\n\n\n\nThe file layout you use determines the URLs that are used for the generated pages.\nGiven the above layout, pages would be generated for the following URLs:\n\n\n/\n/about/\n/license/\n\n\n\n\nYou can also include your Markdown files in nested directories if that better suits your documentation layout.\n\n\ndocs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md\n\n\n\n\nSource files inside nested directories will cause pages to be generated with nested URLs, like so:\n\n\n/\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/\n\n\n\n\nLinking documents\n\n\nMkDocs allows you to interlink your documentation by using regular Markdown hyperlinks.\n\n\nInternal hyperlinks\n\n\nWhen linking between pages in the documentation you can simply use the regular Markdown hyperlinking syntax, including the relative path to the Markdown document you wish to link to.\n\n\nPlease see the [project license](license.md) for further details.\n\n\n\nWhen the MkDocs build runs, these hyperlinks will automatically be transformed into a hyperlink to the appropriate HTML page.\n\n\nWhen working on your documentation you should be able to open the linked Markdown document in a new editor window simply by clicking on the link.\n\n\nIf the target documentation file is in another directory you'll need to make sure to include any relative directory path in the hyperlink.\n\n\nPlease see the [project license](../about/license.md) for further details.\n\n\n\nYou can also link to a section within a target documentation page by using an anchor link.  The generated HTML will correctly transform the path portion of the hyperlink, and leave the anchor portion intact.\n\n\nPlease see the [project license](about.md#license) for further details.\n\n\n\nImages and media\n\n\nAs well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site.  These might include images and other media.\n\n\nFor example, if your project documentation needed to include a \nGitHub pages CNAME file\n and a PNG formatted screenshot image then your file layout might look as follows:\n\n\nmkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png\n\n\n\n\nTo include images in your documentation source files, simply use any of the regular Markdown image syntaxes:\n\n\nCupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*\n\n\n\n\nYou image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.\n\n\nMarkdown extensions\n\n\nMkDocs supports the following Markdown extensions.\n\n\nTables\n\n\nA simple table looks like this:\n\n\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n\n\n\n\nIf you wish, you can add a leading and tailing pipe to each line of the table:\n\n\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n\n\n\n\nSpecify alignment for each column by adding colons to separator lines:\n\n\nFirst Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n\n\n\n\nFenced code blocks\n\n\nStart with a line containing 3 or more backtick ` characters, and ends with the first line with the same number of backticks `:\n\n\n ```\n Fenced code blocks are like Stardard\n Markdown\u2019s regular code blocks, except that\n they\u2019re not indented and instead rely on a\n start and end fence lines to delimit the code\n block.\n ```\n\n\n\n\nWith the approach, the language can be specified on the first line after the backticks:\n\n\n ```python\n def fn():\n     pass\n ```", 
            "title": "Writing your docs"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#writing-your-docs", 
            "text": "How to write and layout your markdown source files.", 
            "title": "Writing your docs"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#configure-pages-and-navigation", 
            "text": "The  pages configuration  in your  mkdocs.yml  defines which pages are built by MkDocs and how they appear in the documentation navigation. If not provided, the pages configuration will be automatically created by discovering all the Markdown files in the  documentation directory .  A simple pages configuration looks like this:  pages:\n- 'index.md'\n- 'about.md'  With this example we will build two pages at the top level and they will automatically have their titles inferred from the filename. Assuming  docs_dir  has the default value,  docs , the source files for this documentation would be  docs/index.md  and  docs/about.md . To provide a custom name for these pages, they can be added before the filename.  pages:\n- Home: 'index.md'\n- About: 'about.md'  Multilevel documentation  Subsections can be created by listing related pages together under a section title. For example:  pages:\n- Home: 'index.md'\n- User Guide:\n    - 'Writing your docs': 'user-guide/writing-your-docs.md'\n    - 'Styling your docs': 'user-guide/styling-your-docs.md'\n- About:\n    - 'License': 'about/license.md'\n    - 'Release Notes': 'about/release-notes.md'  With the above configuration we have three top level sections: Home, User Guide and About. Then under User Guide we have two pages, Writing your docs and Styling your docs. Under the About section we also have two pages, License and Release Notes.", 
            "title": "Configure Pages and Navigation"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#file-layout", 
            "text": "Your documentation source should be written as regular Markdown files, and placed in a directory somewhere in your project.  Normally this directory will be named  docs  and will exist at the top level of your project, alongside the  mkdocs.yml  configuration file.  The simplest project you can create will look something like this:  mkdocs.yml\ndocs/\n    index.md  By convention your project homepage should always be named  index .  Any of the following extensions may be used for your Markdown source files:  markdown ,  mdown ,  mkdn ,  mkd ,  md .  You can also create multi-page documentation, by creating several markdown files:  mkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md  The file layout you use determines the URLs that are used for the generated pages.\nGiven the above layout, pages would be generated for the following URLs:  /\n/about/\n/license/  You can also include your Markdown files in nested directories if that better suits your documentation layout.  docs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md  Source files inside nested directories will cause pages to be generated with nested URLs, like so:  /\n/user-guide/getting-started/\n/user-guide/configuration-options/\n/license/", 
            "title": "File layout"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#linking-documents", 
            "text": "MkDocs allows you to interlink your documentation by using regular Markdown hyperlinks.  Internal hyperlinks  When linking between pages in the documentation you can simply use the regular Markdown hyperlinking syntax, including the relative path to the Markdown document you wish to link to.  Please see the [project license](license.md) for further details.  When the MkDocs build runs, these hyperlinks will automatically be transformed into a hyperlink to the appropriate HTML page.  When working on your documentation you should be able to open the linked Markdown document in a new editor window simply by clicking on the link.  If the target documentation file is in another directory you'll need to make sure to include any relative directory path in the hyperlink.  Please see the [project license](../about/license.md) for further details.  You can also link to a section within a target documentation page by using an anchor link.  The generated HTML will correctly transform the path portion of the hyperlink, and leave the anchor portion intact.  Please see the [project license](about.md#license) for further details.", 
            "title": "Linking documents"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#images-and-media", 
            "text": "As well as the Markdown source files, you can also include other file types in your documentation, which will be copied across when generating your documentation site.  These might include images and other media.  For example, if your project documentation needed to include a  GitHub pages CNAME file  and a PNG formatted screenshot image then your file layout might look as follows:  mkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png  To include images in your documentation source files, simply use any of the regular Markdown image syntaxes:  Cupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*  You image will now be embedded when you build the documentation, and should also be previewed if you're working on the documentation with a Markdown editor.", 
            "title": "Images and media"
        }, 
        {
            "location": "/user-guide/writing-your-docs/#markdown-extensions", 
            "text": "MkDocs supports the following Markdown extensions.  Tables  A simple table looks like this:  First Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell  If you wish, you can add a leading and tailing pipe to each line of the table:  | First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |  Specify alignment for each column by adding colons to separator lines:  First Header | Second Header | Third Header\n:----------- | :-----------: | -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right  Fenced code blocks  Start with a line containing 3 or more backtick ` characters, and ends with the first line with the same number of backticks `:   ```\n Fenced code blocks are like Stardard\n Markdown\u2019s regular code blocks, except that\n they\u2019re not indented and instead rely on a\n start and end fence lines to delimit the code\n block.\n ```  With the approach, the language can be specified on the first line after the backticks:   ```python\n def fn():\n     pass\n ```", 
            "title": "Markdown extensions"
        }
    ]
}